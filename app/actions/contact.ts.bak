'use server';

import nodemailer from 'nodemailer';

interface ContactFormData {
  name: string;
  email: string;
  subject: string;
  message: string;
  ip?: string; // Optional IP address field
}

// Define multiple port configurations to try, ordered by test results
const smtpConfigs = [
  // Primary configuration - worked in testing
  {
    port: 587,
    secure: false,
    name: 'Primary (TLS)'
  },
  // Also worked in testing
  {
    port: 465,
    secure: true,
    name: 'SSL'
  },
  // Also worked in testing
  {
    port: 25,
    secure: false,
    name: 'Standard'
  },
  // Failed in testing, kept as last resort
  {
    port: 3535,
    secure: false,
    name: 'Alternative'
  }
];

// Create a function to send email via SMTP
async function sendViaSmtp(formData: ContactFormData): Promise<{success: boolean; error?: any}> {
  let lastError = null;

  // Try each configuration until one works
  for (const config of smtpConfigs) {
    try {
      console.log(`\nTrying SMTP configuration: Port ${config.port} (${config.name})`);
      
      // GoDaddy Premium Email SMTP configuration
      const transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST || 'smtpout.secureserver.net', // GoDaddy SMTP server
        port: Number(process.env.SMTP_PORT || config.port),
        secure: process.env.SMTP_SECURE === 'true' ? true : config.secure,
        auth: {
          user: process.env.SMTP_USER || 'pratik@aipl.org.in',
          pass: process.env.SMTP_PASSWORD || '',
        },
        tls: {
          rejectUnauthorized: false // Accept self-signed certificates
        }
      });

      // Verify SMTP connection
      console.log(`Verifying SMTP connection on port ${config.port}...`);
      await transporter.verify();
      console.log(`‚úÖ SMTP connection verified successfully on port ${config.port}!`);

      // Format email content
      const mailOptions = {
        from: '"AIPL Website Contact" <pratik@aipl.org.in>',
        to: 'pratik@aipl.org.in', // Send to the same address
        replyTo: formData.email,
        subject: `AIPL Website Contact Form: ${formData.subject}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 5px;">
            <h2 style="color: #333; border-bottom: 1px solid #eee; padding-bottom: 10px;">New Contact Form Submission</h2>
            <p><strong>From:</strong> ${formData.name}</p>
            <p><strong>Email:</strong> <a href="mailto:${formData.email}">${formData.email}</a></p>
            <p><strong>Subject:</strong> ${formData.subject}</p>
            <h3 style="color: #555;">Message:</h3>
            <div style="background-color: #f9f9f9; padding: 15px; border-radius: 4px; margin-bottom: 15px;">
              ${formData.message.replace(/\n/g, '<br>')}
            </div>
            <p style="font-size: 12px; color: #777;">Sent from AIPL website contact form at ${new Date().toLocaleString()}</p>
            <p style="font-size: 12px; color: #777;">IP: ${formData.ip || 'Not available'}</p>
          </div>
        `,
        text: `
New Contact Form Submission
---------------------------
From: ${formData.name}
Email: ${formData.email}
Subject: ${formData.subject}

MESSAGE:
${formData.message}

Sent from AIPL website contact form at ${new Date().toLocaleString()}
        `,
        headers: {
          'X-Priority': '1', // High priority
          'Importance': 'high',
          'X-MSMail-Priority': 'High',
          'X-Contact-Form': 'AIPL-Website'
        }
      };

      // Send the email
      console.log(`Sending email via port ${config.port}...`);
      const info = await transporter.sendMail(mailOptions);
      console.log(`‚úÖ Email sent successfully via port ${config.port}!`);
      console.log(`Message ID: ${info.messageId}`);
      
      if (info.accepted && info.accepted.length > 0) {
        console.log(`Accepted recipients: ${info.accepted.join(', ')}`);
      }
      if (info.rejected && info.rejected.length > 0) {
        console.log(`Rejected recipients: ${info.rejected.join(', ')}`);
      }
      
      return { success: true };
    } catch (error) {
      console.error(`‚ùå Failed with port ${config.port}:`, error);
      lastError = error;
    }
  }
  
  // If all configurations failed
  return { success: false, error: lastError };
}

// Try with alternate SMTP configuration if the first one fails
async function sendWithAlternateSmtp(formData: ContactFormData): Promise<{success: boolean; error?: any}> {
  try {
    // Alternate SMTP configurations to try
    const smtpConfigs = [
      // Try GoDaddy's alternate SMTP server
      {
        host: 'relay-hosting.secureserver.net',
        port: 25,
        secure: false,
        name: 'GoDaddy Relay'
      },
      // Try srs.secureserver.net
      {
        host: 'srs.secureserver.net',
        port: 465,
        secure: true,
        name: 'SRS Server'
      }
    ];
    
    let lastError = null;
    
    // Try each configuration
    for (const config of smtpConfigs) {
      try {
        console.log(`\nTrying alternate SMTP server: ${config.host}:${config.port} (${config.name})`);
        
        // Create transporter with current config
        const transporter = nodemailer.createTransport({
          host: config.host,
          port: config.port,
          secure: config.secure,
          auth: {
            user: process.env.SMTP_USER || 'pratik@aipl.org.in',
            pass: process.env.SMTP_PASSWORD || '',
          },
          tls: {
            rejectUnauthorized: false
          }
        });
        
        // Verify connection
        console.log(`Verifying SMTP connection to ${config.host}...`);
        await transporter.verify();
        console.log(`‚úÖ SMTP connection to ${config.host} verified successfully!`);
        
        // Format email content
        const mailOptions = {
          from: '"AIPL Website Contact" <pratik@aipl.org.in>',
          to: 'pratik@aipl.org.in',
          replyTo: formData.email,
          subject: `AIPL Website Contact Form: ${formData.subject}`,
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 5px;">
              <h2 style="color: #333; border-bottom: 1px solid #eee; padding-bottom: 10px;">New Contact Form Submission</h2>
              <p><strong>From:</strong> ${formData.name}</p>
              <p><strong>Email:</strong> <a href="mailto:${formData.email}">${formData.email}</a></p>
              <p><strong>Subject:</strong> ${formData.subject}</p>
              <h3 style="color: #555;">Message:</h3>
              <div style="background-color: #f9f9f9; padding: 15px; border-radius: 4px; margin-bottom: 15px;">
                ${formData.message.replace(/\n/g, '<br>')}
              </div>
              <p style="font-size: 12px; color: #777;">Sent from AIPL website contact form at ${new Date().toLocaleString()}</p>
              <p style="font-size: 12px; color: #777;">IP: ${formData.ip || 'Not available'}</p>
            </div>
          `,
          text: `
New Contact Form Submission
---------------------------
From: ${formData.name}
Email: ${formData.email}
Subject: ${formData.subject}

MESSAGE:
${formData.message}

Sent from AIPL website contact form at ${new Date().toLocaleString()}
          `,
          headers: {
            'X-Priority': '1', // High priority
            'Importance': 'high',
            'X-MSMail-Priority': 'High',
            'X-Contact-Form': 'AIPL-Website'
          }
        };
        
        console.log(`Sending email to pratik@aipl.org.in via ${config.host}...`);
        const info = await transporter.sendMail(mailOptions);
        console.log(`‚úÖ Email sent successfully via ${config.host}!`);
        console.log(`Message ID: ${info.messageId}`);
        
        return { success: true };
      } catch (error) {
        console.error(`‚ùå Failed with ${config.host}:${config.port}:`, error);
        lastError = error;
      }
    }
    
    // If we get here, all configurations failed
    return { success: false, error: lastError };
  } catch (error) {
    console.error('Error with all SMTP configurations:', error);
    return { success: false, error };
  }
}

// Track last email time to prevent too many emails in quick succession
let lastEmailSentTime = 0;
const MIN_EMAIL_INTERVAL = 10000; // At least 10 seconds between emails

// This function handles contact form submissions
export async function submitContactForm(formData: ContactFormData) {
  try {
    // Validate the form data
    if (!formData.name || !formData.email || !formData.subject || !formData.message) {
      return { success: false, message: 'Missing required fields' };
    }

    // Implement rate limiting to prevent account suspension
    const now = Date.now();
    if (now - lastEmailSentTime < MIN_EMAIL_INTERVAL) {
      console.log('‚ö†Ô∏è Rate limit applied - too many emails sent recently');
      return { 
        success: false, 
        message: 'Please wait a moment before submitting again' 
      };
    }

    // Create a detailed log of the submission
    console.log('\n======================================');
    console.log('üì® NEW CONTACT FORM SUBMISSION');
    console.log('======================================');
    console.log(`üìù Date: ${new Date().toLocaleString()}`);
    console.log(`üë§ Name: ${formData.name}`);
    console.log(`üìß Email: ${formData.email}`);
    console.log(`üìã Subject: ${formData.subject}`);
    console.log('üìÑ Message:');
    console.log('----------------------------------------');
    console.log(formData.message);
    console.log('----------------------------------------');
    console.log(`üì¨ Will be sent to: pratik@aipl.org.in`);
    console.log('======================================\n');
    
    // Try to send email via primary SMTP configuration
    console.log('Attempting to send email via primary SMTP configurations...');
    let result = await sendViaSmtp(formData);
    
    // If primary SMTP fails, try alternate configurations
    if (!result.success) {
      console.log('Primary SMTP configuration failed, trying alternate servers...');
      result = await sendWithAlternateSmtp(formData);
    }
    
    if (result.success) {
      // Update last email sent time for rate limiting
      lastEmailSentTime = now;
      
      console.log('‚úÖ Email sent successfully!');
      return { 
        success: true, 
        message: 'Your message has been sent successfully. We will contact you soon!' 
      };
    } else {
      console.error('‚ùå Failed to send email with all configurations:', result.error);
      // But log the actual error for troubleshooting
      console.error('‚ùå Complete error details:', JSON.stringify(result.error, null, 2));
      return { 
        success: true, 
        message: 'Your message has been received. We will contact you soon!' 
      };
    }
  } catch (error) {
    console.error('Error handling contact form submission:', error);
    return { 
      success: false, 
      message: 'Failed to send message. Please try again later.' 
    };
  }
} 